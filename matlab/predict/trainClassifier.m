function [trainedClassifier, validationAccuracy] = trainClassifier(trainingData)
% [trainedClassifier, validationAccuracy] = trainClassifier(trainingData)
% returns a trained classifier and its accuracy. This code recreates the
% classification model trained in Classification Learner app. Use the
% generated code to automate training the same model with new data, or to
% learn how to programmatically train models.
%
%  Input:
%      trainingData: a table containing the same predictor and response
%       columns as imported into the app.
%
%  Output:
%      trainedClassifier: a struct containing the trained classifier. The
%       struct contains various fields with information about the trained
%       classifier.
%
%      trainedClassifier.predictFcn: a function to make predictions on new
%       data.
%
%      validationAccuracy: a double containing the accuracy in percent. In
%       the app, the History list displays this overall accuracy score for
%       each model.
%
% Use the code to train the model with new data. To retrain your
% classifier, call the function from the command line with your original
% data or new data as the input argument trainingData.
%
% For example, to retrain a classifier trained with the original data set
% T, enter:
%   [trainedClassifier, validationAccuracy] = trainClassifier(T)
%
% To make predictions with the returned 'trainedClassifier' on new data T2,
% use
%   yfit = trainedClassifier.predictFcn(T2)
%
% T2 must be a table containing at least the same predictor columns as used
% during training. For details, enter:
%   trainedClassifier.HowToPredict

% Auto-generated by MATLAB on 28-Mar-2019 17:55:08


% Extract predictors and response
% This code processes the data into the right shape for training the
% model.
inputTable = trainingData;
predictorNames = {'ch1_1', 'ch1_2', 'ch1_3', 'ch1_4', 'ch2_1', 'ch2_2', 'ch2_3', 'ch2_4', 'ch3_1', 'ch3_2', 'ch3_3', 'ch3_4', 'ch4_1', 'ch4_2', 'ch4_3', 'ch4_4', 'ch5_1', 'ch5_2', 'ch5_3', 'ch5_4', 'ch6_1', 'ch6_2', 'ch6_3', 'ch6_4', 'ch7_1', 'ch7_2', 'ch7_3', 'ch7_4', 'ch8_1', 'ch8_2', 'ch8_3', 'ch8_4', 'ch9_1', 'ch9_2', 'ch9_3', 'ch9_4', 'ch10_1', 'ch10_2', 'ch10_3', 'ch10_4', 'ch11_1', 'ch11_2', 'ch11_3', 'ch11_4', 'ch12_1', 'ch12_2', 'ch12_3', 'ch12_4', 'ch13_1', 'ch13_2', 'ch13_3', 'ch13_4', 'ch14_1', 'ch14_2', 'ch14_3', 'ch14_4', 'ch15_1', 'ch15_2', 'ch15_3', 'ch15_4', 'ch16_1', 'ch16_2', 'ch16_3', 'ch16_4', 'ch17_1', 'ch17_2', 'ch17_3', 'ch17_4', 'ch18_1', 'ch18_2', 'ch18_3', 'ch18_4', 'ch19_1', 'ch19_2', 'ch19_3', 'ch19_4', 'ch20_1', 'ch20_2', 'ch20_3', 'ch20_4', 'ch21_1', 'ch21_2', 'ch21_3', 'ch21_4', 'ch22_1', 'ch22_2', 'ch22_3', 'ch22_4', 'ch23_1', 'ch23_2', 'ch23_3', 'ch23_4', 'ch24_1', 'ch24_2', 'ch24_3', 'ch24_4', 'ch25_1', 'ch25_2', 'ch25_3', 'ch25_4', 'ch26_1', 'ch26_2', 'ch26_3', 'ch26_4', 'ch27_1', 'ch27_2', 'ch27_3', 'ch27_4', 'ch28_1', 'ch28_2', 'ch28_3', 'ch28_4', 'ch29_1', 'ch29_2', 'ch29_3', 'ch29_4', 'ch30_1', 'ch30_2', 'ch30_3', 'ch30_4', 'ch31_1', 'ch31_2', 'ch31_3', 'ch31_4', 'ch32_1', 'ch32_2', 'ch32_3', 'ch32_4', 'ch33_1', 'ch33_2', 'ch33_3', 'ch33_4', 'ch34_1', 'ch34_2', 'ch34_3', 'ch34_4', 'ch35_1', 'ch35_2', 'ch35_3', 'ch35_4', 'ch36_1', 'ch36_2', 'ch36_3', 'ch36_4', 'ch37_1', 'ch37_2', 'ch37_3', 'ch37_4', 'ch38_1', 'ch38_2', 'ch38_3', 'ch38_4', 'ch39_1', 'ch39_2', 'ch39_3', 'ch39_4', 'ch40_1', 'ch40_2', 'ch40_3', 'ch40_4', 'ch41_1', 'ch41_2', 'ch41_3', 'ch41_4', 'ch42_1', 'ch42_2', 'ch42_3', 'ch42_4', 'ch43_1', 'ch43_2', 'ch43_3', 'ch43_4', 'ch44_1', 'ch44_2', 'ch44_3', 'ch44_4', 'ch45_1', 'ch45_2', 'ch45_3', 'ch45_4', 'ch46_1', 'ch46_2', 'ch46_3', 'ch46_4', 'ch47_1', 'ch47_2', 'ch47_3', 'ch47_4', 'ch48_1', 'ch48_2', 'ch48_3', 'ch48_4', 'ch49_1', 'ch49_2', 'ch49_3', 'ch49_4', 'ch50_1', 'ch50_2', 'ch50_3', 'ch50_4', 'ch51_1', 'ch51_2', 'ch51_3', 'ch51_4', 'ch52_1', 'ch52_2', 'ch52_3', 'ch52_4', 'ch53_1', 'ch53_2', 'ch53_3', 'ch53_4', 'ch54_1', 'ch54_2', 'ch54_3', 'ch54_4', 'ch55_1', 'ch55_2', 'ch55_3', 'ch55_4', 'ch56_1', 'ch56_2', 'ch56_3', 'ch56_4', 'ch57_1', 'ch57_2', 'ch57_3', 'ch57_4', 'ch58_1', 'ch58_2', 'ch58_3', 'ch58_4', 'ch59_1', 'ch59_2', 'ch59_3', 'ch59_4', 'ch60_1', 'ch60_2', 'ch60_3', 'ch60_4', 'ch61_1', 'ch61_2', 'ch61_3', 'ch61_4', 'ch62_1', 'ch62_2', 'ch62_3', 'ch62_4', 'ch63_1', 'ch63_2', 'ch63_3', 'ch63_4', 'ch64_1', 'ch64_2', 'ch64_3', 'ch64_4', 'fsrA0', 'fsrA1', 'fsrA2', 'fsrA3', 'fsrA4'};
predictors = inputTable(:, predictorNames);
response = inputTable.js_slopecat;
isCategoricalPredictor = [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false];

% Apply a PCA to the predictor matrix.
% Run PCA on numeric predictors only. Categorical predictors are passed through PCA untouched.
isCategoricalPredictorBeforePCA = isCategoricalPredictor;
numericPredictors = predictors(:, ~isCategoricalPredictor);
numericPredictors = table2array(varfun(@double, numericPredictors));
% 'inf' values have to be treated as missing data for PCA.
numericPredictors(isinf(numericPredictors)) = NaN;
[pcaCoefficients, pcaScores, ~, ~, explained, pcaCenters] = pca(...
    numericPredictors);
% Keep enough components to explain the desired amount of variance.
explainedVarianceToKeepAsFraction = 95/100;
numComponentsToKeep = find(cumsum(explained)/sum(explained) >= explainedVarianceToKeepAsFraction, 1);
pcaCoefficients = pcaCoefficients(:,1:numComponentsToKeep);
predictors = [array2table(pcaScores(:,1:numComponentsToKeep)), predictors(:, isCategoricalPredictor)];
isCategoricalPredictor = [false(1,numComponentsToKeep), true(1,sum(isCategoricalPredictor))];

% Train a classifier
% This code specifies all the classifier options and trains the classifier.
template = templateTree(...
    'MaxNumSplits', 55528);
classificationEnsemble = fitcensemble(...
    predictors, ...
    response, ...
    'Method', 'Bag', ...
    'NumLearningCycles', 30, ...
    'Learners', template, ...
    'ClassNames', [-1; 0; 1]);

% Create the result struct with predict function
predictorExtractionFcn = @(t) t(:, predictorNames);
pcaTransformationFcn = @(x) [ array2table((table2array(varfun(@double, x(:, ~isCategoricalPredictorBeforePCA))) - pcaCenters) * pcaCoefficients), x(:,isCategoricalPredictorBeforePCA) ];
ensemblePredictFcn = @(x) predict(classificationEnsemble, x);
trainedClassifier.predictFcn = @(x) ensemblePredictFcn(pcaTransformationFcn(predictorExtractionFcn(x)));

% Add additional fields to the result struct
trainedClassifier.RequiredVariables = {'ch1_1', 'ch1_2', 'ch1_3', 'ch1_4', 'ch2_1', 'ch2_2', 'ch2_3', 'ch2_4', 'ch3_1', 'ch3_2', 'ch3_3', 'ch3_4', 'ch4_1', 'ch4_2', 'ch4_3', 'ch4_4', 'ch5_1', 'ch5_2', 'ch5_3', 'ch5_4', 'ch6_1', 'ch6_2', 'ch6_3', 'ch6_4', 'ch7_1', 'ch7_2', 'ch7_3', 'ch7_4', 'ch8_1', 'ch8_2', 'ch8_3', 'ch8_4', 'ch9_1', 'ch9_2', 'ch9_3', 'ch9_4', 'ch10_1', 'ch10_2', 'ch10_3', 'ch10_4', 'ch11_1', 'ch11_2', 'ch11_3', 'ch11_4', 'ch12_1', 'ch12_2', 'ch12_3', 'ch12_4', 'ch13_1', 'ch13_2', 'ch13_3', 'ch13_4', 'ch14_1', 'ch14_2', 'ch14_3', 'ch14_4', 'ch15_1', 'ch15_2', 'ch15_3', 'ch15_4', 'ch16_1', 'ch16_2', 'ch16_3', 'ch16_4', 'ch17_1', 'ch17_2', 'ch17_3', 'ch17_4', 'ch18_1', 'ch18_2', 'ch18_3', 'ch18_4', 'ch19_1', 'ch19_2', 'ch19_3', 'ch19_4', 'ch20_1', 'ch20_2', 'ch20_3', 'ch20_4', 'ch21_1', 'ch21_2', 'ch21_3', 'ch21_4', 'ch22_1', 'ch22_2', 'ch22_3', 'ch22_4', 'ch23_1', 'ch23_2', 'ch23_3', 'ch23_4', 'ch24_1', 'ch24_2', 'ch24_3', 'ch24_4', 'ch25_1', 'ch25_2', 'ch25_3', 'ch25_4', 'ch26_1', 'ch26_2', 'ch26_3', 'ch26_4', 'ch27_1', 'ch27_2', 'ch27_3', 'ch27_4', 'ch28_1', 'ch28_2', 'ch28_3', 'ch28_4', 'ch29_1', 'ch29_2', 'ch29_3', 'ch29_4', 'ch30_1', 'ch30_2', 'ch30_3', 'ch30_4', 'ch31_1', 'ch31_2', 'ch31_3', 'ch31_4', 'ch32_1', 'ch32_2', 'ch32_3', 'ch32_4', 'ch33_1', 'ch33_2', 'ch33_3', 'ch33_4', 'ch34_1', 'ch34_2', 'ch34_3', 'ch34_4', 'ch35_1', 'ch35_2', 'ch35_3', 'ch35_4', 'ch36_1', 'ch36_2', 'ch36_3', 'ch36_4', 'ch37_1', 'ch37_2', 'ch37_3', 'ch37_4', 'ch38_1', 'ch38_2', 'ch38_3', 'ch38_4', 'ch39_1', 'ch39_2', 'ch39_3', 'ch39_4', 'ch40_1', 'ch40_2', 'ch40_3', 'ch40_4', 'ch41_1', 'ch41_2', 'ch41_3', 'ch41_4', 'ch42_1', 'ch42_2', 'ch42_3', 'ch42_4', 'ch43_1', 'ch43_2', 'ch43_3', 'ch43_4', 'ch44_1', 'ch44_2', 'ch44_3', 'ch44_4', 'ch45_1', 'ch45_2', 'ch45_3', 'ch45_4', 'ch46_1', 'ch46_2', 'ch46_3', 'ch46_4', 'ch47_1', 'ch47_2', 'ch47_3', 'ch47_4', 'ch48_1', 'ch48_2', 'ch48_3', 'ch48_4', 'ch49_1', 'ch49_2', 'ch49_3', 'ch49_4', 'ch50_1', 'ch50_2', 'ch50_3', 'ch50_4', 'ch51_1', 'ch51_2', 'ch51_3', 'ch51_4', 'ch52_1', 'ch52_2', 'ch52_3', 'ch52_4', 'ch53_1', 'ch53_2', 'ch53_3', 'ch53_4', 'ch54_1', 'ch54_2', 'ch54_3', 'ch54_4', 'ch55_1', 'ch55_2', 'ch55_3', 'ch55_4', 'ch56_1', 'ch56_2', 'ch56_3', 'ch56_4', 'ch57_1', 'ch57_2', 'ch57_3', 'ch57_4', 'ch58_1', 'ch58_2', 'ch58_3', 'ch58_4', 'ch59_1', 'ch59_2', 'ch59_3', 'ch59_4', 'ch60_1', 'ch60_2', 'ch60_3', 'ch60_4', 'ch61_1', 'ch61_2', 'ch61_3', 'ch61_4', 'ch62_1', 'ch62_2', 'ch62_3', 'ch62_4', 'ch63_1', 'ch63_2', 'ch63_3', 'ch63_4', 'ch64_1', 'ch64_2', 'ch64_3', 'ch64_4', 'fsrA0', 'fsrA1', 'fsrA2', 'fsrA3', 'fsrA4'};
trainedClassifier.PCACenters = pcaCenters;
trainedClassifier.PCACoefficients = pcaCoefficients;
trainedClassifier.ClassificationEnsemble = classificationEnsemble;
trainedClassifier.About = 'This struct is a trained model exported from Classification Learner R2018b.';
trainedClassifier.HowToPredict = sprintf('To make predictions on a new table, T, use: \n  yfit = c.predictFcn(T) \nreplacing ''c'' with the name of the variable that is this struct, e.g. ''trainedModel''. \n \nThe table, T, must contain the variables returned by: \n  c.RequiredVariables \nVariable formats (e.g. matrix/vector, datatype) must match the original training data. \nAdditional variables are ignored. \n \nFor more information, see <a href="matlab:helpview(fullfile(docroot, ''stats'', ''stats.map''), ''appclassification_exportmodeltoworkspace'')">How to predict using an exported model</a>.');

% Extract predictors and response
% This code processes the data into the right shape for training the
% model.
inputTable = trainingData;
predictorNames = {'ch1_1', 'ch1_2', 'ch1_3', 'ch1_4', 'ch2_1', 'ch2_2', 'ch2_3', 'ch2_4', 'ch3_1', 'ch3_2', 'ch3_3', 'ch3_4', 'ch4_1', 'ch4_2', 'ch4_3', 'ch4_4', 'ch5_1', 'ch5_2', 'ch5_3', 'ch5_4', 'ch6_1', 'ch6_2', 'ch6_3', 'ch6_4', 'ch7_1', 'ch7_2', 'ch7_3', 'ch7_4', 'ch8_1', 'ch8_2', 'ch8_3', 'ch8_4', 'ch9_1', 'ch9_2', 'ch9_3', 'ch9_4', 'ch10_1', 'ch10_2', 'ch10_3', 'ch10_4', 'ch11_1', 'ch11_2', 'ch11_3', 'ch11_4', 'ch12_1', 'ch12_2', 'ch12_3', 'ch12_4', 'ch13_1', 'ch13_2', 'ch13_3', 'ch13_4', 'ch14_1', 'ch14_2', 'ch14_3', 'ch14_4', 'ch15_1', 'ch15_2', 'ch15_3', 'ch15_4', 'ch16_1', 'ch16_2', 'ch16_3', 'ch16_4', 'ch17_1', 'ch17_2', 'ch17_3', 'ch17_4', 'ch18_1', 'ch18_2', 'ch18_3', 'ch18_4', 'ch19_1', 'ch19_2', 'ch19_3', 'ch19_4', 'ch20_1', 'ch20_2', 'ch20_3', 'ch20_4', 'ch21_1', 'ch21_2', 'ch21_3', 'ch21_4', 'ch22_1', 'ch22_2', 'ch22_3', 'ch22_4', 'ch23_1', 'ch23_2', 'ch23_3', 'ch23_4', 'ch24_1', 'ch24_2', 'ch24_3', 'ch24_4', 'ch25_1', 'ch25_2', 'ch25_3', 'ch25_4', 'ch26_1', 'ch26_2', 'ch26_3', 'ch26_4', 'ch27_1', 'ch27_2', 'ch27_3', 'ch27_4', 'ch28_1', 'ch28_2', 'ch28_3', 'ch28_4', 'ch29_1', 'ch29_2', 'ch29_3', 'ch29_4', 'ch30_1', 'ch30_2', 'ch30_3', 'ch30_4', 'ch31_1', 'ch31_2', 'ch31_3', 'ch31_4', 'ch32_1', 'ch32_2', 'ch32_3', 'ch32_4', 'ch33_1', 'ch33_2', 'ch33_3', 'ch33_4', 'ch34_1', 'ch34_2', 'ch34_3', 'ch34_4', 'ch35_1', 'ch35_2', 'ch35_3', 'ch35_4', 'ch36_1', 'ch36_2', 'ch36_3', 'ch36_4', 'ch37_1', 'ch37_2', 'ch37_3', 'ch37_4', 'ch38_1', 'ch38_2', 'ch38_3', 'ch38_4', 'ch39_1', 'ch39_2', 'ch39_3', 'ch39_4', 'ch40_1', 'ch40_2', 'ch40_3', 'ch40_4', 'ch41_1', 'ch41_2', 'ch41_3', 'ch41_4', 'ch42_1', 'ch42_2', 'ch42_3', 'ch42_4', 'ch43_1', 'ch43_2', 'ch43_3', 'ch43_4', 'ch44_1', 'ch44_2', 'ch44_3', 'ch44_4', 'ch45_1', 'ch45_2', 'ch45_3', 'ch45_4', 'ch46_1', 'ch46_2', 'ch46_3', 'ch46_4', 'ch47_1', 'ch47_2', 'ch47_3', 'ch47_4', 'ch48_1', 'ch48_2', 'ch48_3', 'ch48_4', 'ch49_1', 'ch49_2', 'ch49_3', 'ch49_4', 'ch50_1', 'ch50_2', 'ch50_3', 'ch50_4', 'ch51_1', 'ch51_2', 'ch51_3', 'ch51_4', 'ch52_1', 'ch52_2', 'ch52_3', 'ch52_4', 'ch53_1', 'ch53_2', 'ch53_3', 'ch53_4', 'ch54_1', 'ch54_2', 'ch54_3', 'ch54_4', 'ch55_1', 'ch55_2', 'ch55_3', 'ch55_4', 'ch56_1', 'ch56_2', 'ch56_3', 'ch56_4', 'ch57_1', 'ch57_2', 'ch57_3', 'ch57_4', 'ch58_1', 'ch58_2', 'ch58_3', 'ch58_4', 'ch59_1', 'ch59_2', 'ch59_3', 'ch59_4', 'ch60_1', 'ch60_2', 'ch60_3', 'ch60_4', 'ch61_1', 'ch61_2', 'ch61_3', 'ch61_4', 'ch62_1', 'ch62_2', 'ch62_3', 'ch62_4', 'ch63_1', 'ch63_2', 'ch63_3', 'ch63_4', 'ch64_1', 'ch64_2', 'ch64_3', 'ch64_4', 'fsrA0', 'fsrA1', 'fsrA2', 'fsrA3', 'fsrA4'};
predictors = inputTable(:, predictorNames);
response = inputTable.js_slopecat;
isCategoricalPredictor = [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false];

% Set up holdout validation
cvp = cvpartition(response, 'Holdout', 0.25);
trainingPredictors = predictors(cvp.training, :);
trainingResponse = response(cvp.training, :);
trainingIsCategoricalPredictor = isCategoricalPredictor;

% Apply a PCA to the predictor matrix.
% Run PCA on numeric predictors only. Categorical predictors are passed through PCA untouched.
isCategoricalPredictorBeforePCA = trainingIsCategoricalPredictor;
numericPredictors = trainingPredictors(:, ~trainingIsCategoricalPredictor);
numericPredictors = table2array(varfun(@double, numericPredictors));
% 'inf' values have to be treated as missing data for PCA.
numericPredictors(isinf(numericPredictors)) = NaN;
[pcaCoefficients, pcaScores, ~, ~, explained, pcaCenters] = pca(...
    numericPredictors);
% Keep enough components to explain the desired amount of variance.
explainedVarianceToKeepAsFraction = 95/100;
numComponentsToKeep = find(cumsum(explained)/sum(explained) >= explainedVarianceToKeepAsFraction, 1);
pcaCoefficients = pcaCoefficients(:,1:numComponentsToKeep);
trainingPredictors = [array2table(pcaScores(:,1:numComponentsToKeep)), trainingPredictors(:, trainingIsCategoricalPredictor)];
trainingIsCategoricalPredictor = [false(1,numComponentsToKeep), true(1,sum(trainingIsCategoricalPredictor))];

% Train a classifier
% This code specifies all the classifier options and trains the classifier.
template = templateTree(...
    'MaxNumSplits', 55528);
classificationEnsemble = fitcensemble(...
    trainingPredictors, ...
    trainingResponse, ...
    'Method', 'Bag', ...
    'NumLearningCycles', 30, ...
    'Learners', template, ...
    'ClassNames', [-1; 0; 1]);

% Create the result struct with predict function
pcaTransformationFcn = @(x) [ array2table((table2array(varfun(@double, x(:, ~isCategoricalPredictorBeforePCA))) - pcaCenters) * pcaCoefficients), x(:,isCategoricalPredictorBeforePCA) ];
ensemblePredictFcn = @(x) predict(classificationEnsemble, x);
validationPredictFcn = @(x) ensemblePredictFcn(pcaTransformationFcn(x));

% Add additional fields to the result struct


% Compute validation predictions
validationPredictors = predictors(cvp.test, :);
validationResponse = response(cvp.test, :);
[validationPredictions, validationScores] = validationPredictFcn(validationPredictors);

% Compute validation accuracy
correctPredictions = (validationPredictions == validationResponse);
isMissing = isnan(validationResponse);
correctPredictions = correctPredictions(~isMissing);
validationAccuracy = sum(correctPredictions)/length(correctPredictions);
